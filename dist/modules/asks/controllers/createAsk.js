import { RoleType } from "../../../constants/roles.js";
import { getCurrentFormattedDateTime } from "../../../utils/getCurrentFormattedDateTime.js";
import { sendMessageToBTWChat } from "../../../utils/telegram/sendMessageToBTWChat.js";
import User from "../../auth/models/User.js";
import { Ask } from "../models/Ask.js";
export const createAsk = async (req, res) => {
    try {
        const { artikul, nameukr, quant, com, askerId } = req.body;
        const asker = await User.findById(askerId);
        if (!asker) {
            return res.status(404).json({ message: "User not found" });
        }
        const time = getCurrentFormattedDateTime();
        const actions = [
            `${time} ${asker?.fullname ?? ""}: –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ ${nameukr}
      ${quant !== undefined && ", –∫—ñ–ª—å–∫—ñ—Å—Ç—å: "}${quant}
      ${com && ", –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–π: "}${com}`,
        ];
        const ask = new Ask({
            artikul,
            nameukr,
            quant,
            com,
            asker: askerId,
            askerData: {
                _id: asker._id,
                fullname: asker.fullname,
                telegram: asker.telegram,
                photo: asker.photo,
            },
            actions,
            status: "new",
        });
        await ask.save();
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        res.status(201).json(ask);
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —á–∞—Ç –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Ç–≤–µ—Ç)
        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é PRIME –∏–ª–∏ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        if (asker.role !== RoleType.PRIME && process.env.NODE_ENV !== "test") {
            try {
                const telegramMessage = `üÜï –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç

üë§ ${asker.fullname}
üì¶ ${artikul}
üìù ${nameukr || "‚Äî"}${quant !== undefined && quant !== null ? `\n\nüî¢ ${quant}` : ""}${com ? `\nüí¨ ${com}` : ""}`;
                await sendMessageToBTWChat(telegramMessage);
            }
            catch (telegramError) {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ —ç—Ç–æ —É–∂–µ –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
                console.error("Failed to send Telegram notification:", telegramError);
            }
        }
    }
    catch (error) {
        console.error("Error creating ask:", error);
        res.status(500).json({ message: "Server error", error });
    }
};
