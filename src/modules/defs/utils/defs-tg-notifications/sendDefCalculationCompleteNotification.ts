import { sendMessageToDefsChat } from "../../../../utils/telegram/sendMessageToDefsChat.js";
import { IDeficitCalculationResult, IDeficitItem } from "../../models/Def.js";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —á–∞–Ω–∫–∏
const chunkArray = <T>(array: T[], chunkSize: number): T[][] => {
  const chunks: T[][] = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    chunks.push(array.slice(i, i + chunkSize));
  }
  return chunks;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤ –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
const separateDeficitsByStatus = (
  deficits: IDeficitCalculationResult
): {
  critical: [string, IDeficitItem][];
  limited: [string, IDeficitItem][];
} => {
  const critical: [string, IDeficitItem][] = [];
  const limited: [string, IDeficitItem][] = [];

  Object.entries(deficits).forEach(([artikul, data]) => {
    if (data.status === "critical") {
      critical.push([artikul, data]);
    } else if (data.status === "limited") {
      limited.push([artikul, data]);
    }
  });

  return { critical, limited };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ñ–∏—Ü–∏—Ç–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
const createDeficitMessage = (
  deficits: [string, IDeficitItem][],
  startIndex: number,
  totalDeficits: number,
  category: "critical" | "limited"
): string => {
  const endIndex = startIndex + deficits.length - 1;
  const rangeText = `${startIndex + 1}-${endIndex + 1} –∑ ${totalDeficits}`;
  const categoryIcon = category === "critical" ? "üî¥" : "üü°";
  const categoryName =
    category === "critical" ? "–ö—Ä–∏—Ç–∏—á–Ω—ñ –¥–µ—Ñ—ñ—Ü–∏—Ç–∏" : "–î–µ—Ñ—ñ—Ü–∏—Ç–∏ –≤ –ª—ñ–º—ñ—Ç—ñ";

  const deficitList = deficits
    .map(([artikul, data]) => {
      const difQuant = data.difQuant || 0;
      return `${artikul}: ${difQuant}`;
    })
    .join("\n");

  return `${categoryIcon} ${categoryName} (${rangeText}):
${deficitList}`;
};

export const sendDefCalculationCompleteNotification = async (
  result: IDeficitCalculationResult
): Promise<void> => {
  try {
    const totalDeficits = Object.keys(result).length;

    // –†–∞–∑–¥–µ–ª—è–µ–º –¥–µ—Ñ–∏—Ü–∏—Ç—ã –Ω–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –∏ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    const { critical, limited } = separateDeficitsByStatus(result);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º summary-—Å–æ–æ–±—â–µ–Ω–∏–µ
    const summaryMessage =
      `‚úÖ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–µ—Ñ—ñ—Ü–∏—Ç—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n` +
      `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:\n` +
      `‚Ä¢ –í—Å—å–æ–≥–æ –¥–µ—Ñ—ñ—Ü–∏—Ç—ñ–≤: ${totalDeficits}\n` +
      `‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω–∏—Ö: ${critical.length}\n` +
      `‚Ä¢ –í –ª—ñ–º—ñ—Ç—ñ: ${limited.length}`;

    await sendMessageToDefsChat(summaryMessage);

    if (totalDeficits === 0) {
      await sendMessageToDefsChat(`üéâ –í—ñ–¥–º—ñ–Ω–Ω–æ! 
–î–µ—Ñ—ñ—Ü–∏—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
–í—Å—ñ –∞—Ä—Ç–∏–∫—É–ª–∏ –≤ –Ω–æ—Ä–º—ñ`);
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –¥–µ—Ñ–∏—Ü–∏—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (critical.length > 0) {
        const criticalChunks = chunkArray(critical, 20);

        for (let i = 0; i < criticalChunks.length; i++) {
          const chunk = criticalChunks[i];
          const startIndex = i * 20;
          const message = createDeficitMessage(
            chunk,
            startIndex,
            critical.length,
            "critical"
          );

          await sendMessageToDefsChat(message);

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (500–º—Å)
          if (i < criticalChunks.length - 1) {
            await new Promise((resolve) => setTimeout(resolve, 500));
          }
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Ü–∏—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (limited.length > 0) {
        const limitedChunks = chunkArray(limited, 20);

        for (let i = 0; i < limitedChunks.length; i++) {
          const chunk = limitedChunks[i];
          const startIndex = i * 20;
          const message = createDeficitMessage(
            chunk,
            startIndex,
            limited.length,
            "limited"
          );

          await sendMessageToDefsChat(message);

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (500–º—Å)
          if (i < limitedChunks.length - 1) {
            await new Promise((resolve) => setTimeout(resolve, 500));
          }
        }
      }
    }
  } catch (error) {
    console.error(
      "Failed to send completion notification to Defs Chat:",
      error
    );
    // –ù–µ –≤–∏–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ä–∏–≤–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
  }
};
